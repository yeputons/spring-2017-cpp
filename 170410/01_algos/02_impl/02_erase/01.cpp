#include <vector>
#include <iostream>
#include <algorithm>

// Функция std::unique должна удалять одинаковые подряд идущие элементы из контейнера.
// Так как она "изменяет" размер контейнера, то ей мало просто принимать два итератора;
// она должна как-то модифицировать контейнер. Однако через итератор модифицировать
// контейнер нельзя. Поэтому она переупорядочивает элементы так, что начало отрезка - это
// то, что должно лежать в контейнере, а конец отрезка - это все лишние элементы. И
// возвращает итератор на:
// 1. Первый элемент этого конца отрезкаю
// 2. То же самое: первый элемент, который нужно удалить из контейнера.
// 3. То же самое: итератор, указывающий на "новый конец" контейнера.

int main() {
  std::vector<int> a = { 1, 1, 2, 1, 3, 3, 3, 4, 5, 5 };

  std::vector<int>::iterator new_end = std::unique(a.begin(), a.end());
  //a.resize(new_end - a.begin());  // Можно просто изменить размер.
  //a.erase(new_end, a.end());      // То же самое: можно удалить хвост.
  a.erase(std::unique(a.begin(), a.end()), a.end()); // Идиома: пишем в одну строчку.

  // print(a); // FIXME: добавить функцию print().
  return 0;
}

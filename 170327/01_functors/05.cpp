#include <set>
#include "print.h"

using std::set;

struct my_greater {
  // Никогда так не делайте. Этот компаратор нарушает
  // все мыслимые и немыслимые требования к линейному порядку.
  // Visual Studio в отладочном режиме может свалиться по
  // assert, например. Остальные могут просто выдать какую-то чушь
  // и/или undefined behavior.
  bool operator()(int a, int b) {
    // Обратите внимание, что несмотря на наличие '% 2',
    // элементов в set может быть произвольное количество.
    // Зависит от воли случая и undefined behavior.
    return rand() % 2;
  }
};

int main() {
  srand(1343278);
  set<int, my_greater> x;
  for (int i = 0; i < 10; i++) {
    x.insert(i);
  }
  // На паре в этот момент в моём set<> лежал элемент 1.
  x.erase(1);
  // А после его удаления почему-то вместе с ним удалилось
  // ещё три элемента. Упс. Вероятно, красно-чёрное дерево
  // внутри set<> сломалось.
  print(x.begin(), x.end());
  return 0;
}
